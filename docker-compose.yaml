version: '3.7'
networks:
  caddy:
services:
  nocodb: 
    depends_on: 
      root_db: 
        condition: service_healthy
    environment: 
      NC_DB: "pg://root_db:5432?u=postgres&p=password&d=root_db"
    image: "nocodb/nocodb:latest"
    container_name: nocodb
    ports: 
      - "8080:8080"
    restart: always
    volumes: 
      - "nc_data:/usr/app/data"
    networks:
      - caddy
  root_db: 
    environment: 
      POSTGRES_DB: root_db
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
    healthcheck: 
      interval: 10s
      retries: 10
      test: "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\""
      timeout: 2s
    image: postgres
    restart: always
    volumes: 
      - "db_data:/var/lib/postgresql/data"
    networks:
      - caddy
  rocketchat:
    container_name: rocketchat
    image: rocket.chat:latest
    networks:
      - caddy
    restart: unless-stopped
    environment:
     - PORT=3000
     - ROOT_URL=https://geeksmaterial.com
     - MONGO_URL=mongodb://mongo:27017/rocketchat
     - MONGO_OPLOG_URL=mongodb://mongo:27017/local
    depends_on:
     - mongo
  mongo:
    container_name: mongo
    image: mongo:latest
    restart: unless-stopped
    volumes:
     - ./data/db:/data/db
    command: mongod --oplogSize 128 --replSet rs0 
    networks:
      - caddy
 
  # this container's job is just run the command to initialize the replica set.
  # it will run the command and remove himself (it will not stay running)
  mongo-init-replica:
    image: mongo:latest
    networks:
      - caddy
    command: >
      bash -c
        "for i in `seq 1 30`; do
            msg=$$(mongosh mongo/rocketchat --quiet --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [ { _id: 0, host: 'mongo:27017' } ]})\" 2>&1)
            s=$$?
            if [ \"$$s\" -eq 0 ]; then
              break
            fi
            if [[ \"$$msg\" == \"MongoServerError: already initialized\" ]] ; then
              echo $$msg
              break
            fi
          echo \"Tried $$i times. Waiting 5 secs...\";
          sleep 5;
        done; (exit 0)"
    depends_on:
      - mongo
      
  caddy:
    image: caddy:latest
    restart: unless-stopped
    container_name: caddy
    ports:
      - 80:80
      - 443:443
    volumes:
      - /home/admin/containers/caddy/Caddyfile:/etc/caddy/Caddyfile
      - /home/admin/containers/caddy/site:/srv
      - /home/admin/containers/caddy/caddy_data:/data
      - /home/admin/containers/caddy/caddy_config:/config
    networks:
      - caddy
volumes:
  caddy_data:
    external: true
  caddy_config:
  db_data: {}
  nc_data: {}
